# {{PROJECT_NAME}} - Development Practices

## Code Standards & Quality

### Code Style
{{CODE_STYLE}}

### Naming Conventions
{{NAMING_CONVENTIONS}}

### File Organization
{{FILE_ORGANIZATION}}

### Documentation Standards
{{DOCUMENTATION_STANDARDS}}

### Security Guidelines
{{SECURITY_GUIDELINES}}

### Performance Considerations
{{PERFORMANCE_CONSIDERATIONS}}

---

## Architecture Decisions

### Decision Template
- **Date**: 
- **Decision**: 
- **Context**: 
- **Options Considered**: 
- **Chosen Option**: 
- **Rationale**: 
- **Consequences**: 

### Recent Decisions
{{RECENT_DECISIONS}}

### Key Architecture Decisions
{{KEY_ARCHITECTURE_DECISIONS}}

### Technology Choices
{{TECHNOLOGY_CHOICES}}

### Design Patterns
{{DESIGN_PATTERNS}}

---

## Code Patterns

### Standard Patterns
{{STANDARD_PATTERNS}}

### Component Patterns
{{COMPONENT_PATTERNS}}

### Data Handling Patterns
{{DATA_HANDLING_PATTERNS}}

### Error Handling Patterns
{{ERROR_HANDLING_PATTERNS}}

### Testing Patterns
{{TESTING_PATTERNS}}

### Configuration Patterns
{{CONFIGURATION_PATTERNS}}

### Examples
{{PATTERN_EXAMPLES}}

---

## Development Workflows

### Development Process
{{DEVELOPMENT_PROCESS}}

### Before Starting Development
{{BEFORE_STARTING}}

### Implementation Steps
{{IMPLEMENTATION_STEPS}}

### Testing Workflow
{{TESTING_WORKFLOW}}

#### Testing Requirements
{{TESTING_REQUIREMENTS}}

### Code Review Process
{{CODE_REVIEW_PROCESS}}

#### Code Review Guidelines
{{CODE_REVIEW_GUIDELINES}}

### Deployment Steps
{{DEPLOYMENT_STEPS}}

### Troubleshooting Common Issues
{{TROUBLESHOOTING}}

---

## Feature Planning

### Planning Process
{{PLANNING_PROCESS}}

### Requirements Gathering
{{REQUIREMENTS_GATHERING}}

### Technical Analysis
{{TECHNICAL_ANALYSIS}}

### Design Considerations
{{DESIGN_CONSIDERATIONS}}

### Implementation Planning
{{IMPLEMENTATION_PLANNING}}

### Risk Assessment
{{RISK_ASSESSMENT}}

### Timeline Estimation
{{TIMELINE_ESTIMATION}}

---

## Debugging & Maintenance

### Debugging Process
{{DEBUGGING_PROCESS}}

### Common Issues
{{COMMON_ISSUES}}

### Debugging Tools
{{DEBUGGING_TOOLS}}

### Log Analysis
{{LOG_ANALYSIS}}

### Performance Debugging
{{PERFORMANCE_DEBUGGING}}

### Error Tracking
{{ERROR_TRACKING}}

### Resolution Documentation
{{RESOLUTION_DOCUMENTATION}}

---

## Specification Implementation

### Creating Specifications

Use `zeri add-spec <name>` to create new feature specifications:

```bash
# Create a new specification
zeri add-spec "feature-name"

# This creates .zeri/specs/feature-name.md with the standard template
```

**Specification Structure:**
- **Overview**: Brief description of the feature or enhancement
- **Requirements**: Detailed list of functional requirements
- **Implementation Notes**: Technical considerations and dependencies
- **TODO**: Checklist for tracking implementation progress

### Specification Workflow

1. **Create Specification**: Use `zeri add-spec` command to create structured requirements
2. **Plan Implementation**: Break down requirements into actionable tasks
3. **Implement Features**: Follow the TODO checklist step by step
4. **Mark Progress**: Update TODOs in real-time during development
5. **Review and Complete**: Ensure all requirements are met

### Best Practices

**Specification Content:**
- Write clear, actionable requirements
- Include technical considerations and dependencies
- Reference existing patterns and conventions
- Consider testing and documentation needs

**Implementation Process:**
- Always start with a specification for non-trivial features
- Break complex features into smaller, manageable tasks
- Follow established coding patterns and conventions
- Write tests alongside implementation

### TODO Marking

Mark TODO items as complete when implementing specifications:

- Mark checkboxes as `- [x]` when completing each implementation step
- This helps track progress and manage development workflow
- Update TODOs in real-time during implementation

**Example:**
```markdown
## TODO
- [x] Design and plan implementation
- [x] Implement core functionality
- [ ] Add tests
- [ ] Update documentation
- [ ] Review and refine
- [ ] Mark specification as complete
```

### Specification Directory Structure

```
.zeri/
├── specs/                    # Feature specifications
│   ├── feature-name.md      # Individual specification files
│   └── another-feature.md   # Each spec is self-contained
└── templates/
    └── spec.md              # Template for new specifications
```